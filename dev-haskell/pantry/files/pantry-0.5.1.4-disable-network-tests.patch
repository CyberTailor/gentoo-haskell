diff --git a/test/Pantry/ArchiveSpec.hs b/test/Pantry/ArchiveSpec.hs
index d3ca3cd..2d43fbe 100644
--- a/test/Pantry/ArchiveSpec.hs
+++ b/test/Pantry/ArchiveSpec.hs
@@ -59,7 +59,7 @@ treeWithoutCabalFile _ = False
 
 spec :: Spec
 spec = do
-  it "finds cabal file from tarball" $ do
+  xit "finds cabal file from tarball" $ do
     ident <- getRawPackageLocationIdent' TestArchive
       { testLocation = TLFilePath "attic/package-0.1.2.3.tar.gz"
       , testSubdir = ""
@@ -83,13 +83,13 @@ spec = do
       , testSubdir = "."
       }
     ident `shouldBe` parsePackageIdentifier' "hpack-0.1.2.3"
-  it "finds cabal file from tarball with subdir 'subs/pantry/'" $ do
+  xit "finds cabal file from tarball with subdir 'subs/pantry/'" $ do
     ident <- getRawPackageLocationIdent' TestArchive
       { testLocation = urlToStackCommit "2b846ff4fda13a8cd095e7421ce76df0a08b10dc"
       , testSubdir = "subs/pantry/"
       }
     ident `shouldBe` parsePackageIdentifier' "pantry-0.1.0.0"
-  it "matches whole directory name" $
+  xit "matches whole directory name" $
     getRawPackageLocationIdent' TestArchive
       { testLocation = urlToStackCommit "2b846ff4fda13a8cd095e7421ce76df0a08b10dc"
       , testSubdir = "subs/pant"
diff --git a/test/Pantry/CabalSpec.hs b/test/Pantry/CabalSpec.hs
index 5bf03cf..9ca2978 100644
--- a/test/Pantry/CabalSpec.hs
+++ b/test/Pantry/CabalSpec.hs
@@ -10,7 +10,7 @@ import Distribution.Types.PackageName (mkPackageName)
 import Distribution.Types.Version (mkVersion)
 
 spec :: Spec
-spec = describe "wrong cabal file" $ do
+spec = xdescribe "wrong cabal file" $ do
   let test :: HasCallStack => String -> RIO PantryApp () -> Spec
       test name action = it name (runPantryApp action :: IO ())
       shouldThrow' x y = withRunInIO $ \run -> run x `shouldThrow` y
diff --git a/test/Pantry/CasaSpec.hs b/test/Pantry/CasaSpec.hs
index 1972114..1958b63 100644
--- a/test/Pantry/CasaSpec.hs
+++ b/test/Pantry/CasaSpec.hs
@@ -28,21 +28,21 @@ completeSpec =
 
 loadHackagePackageSpec :: Spec
 loadHackagePackageSpec = do
-  it
+  xit
     "loadPackageRaw Exact hackage lookup"
     (shouldReturn
        (fmap
           packageTreeKey
           (runPantryAppClean (loadPackageRaw (argsRlpi unliftio_0_2_12))))
        (argsTreeKey unliftio_0_2_12))
-  it
+  xit
     "loadHackagePackageRaw Exact hackage lookup"
     (shouldReturn
        (fmap
           packageTreeKey
           (runPantryAppClean (loadPackageRaw (argsRlpi unliftio_0_2_12))))
        (argsTreeKey unliftio_0_2_12))
-  it
+  xit
     "loadHackagePackageRawViaCasa Exact hackage lookup"
     (shouldReturn
        (fmap
diff --git a/test/Pantry/GlobalHintsSpec.hs b/test/Pantry/GlobalHintsSpec.hs
index 8d01bf0..6f8f6fa 100644
--- a/test/Pantry/GlobalHintsSpec.hs
+++ b/test/Pantry/GlobalHintsSpec.hs
@@ -14,7 +14,7 @@ import Path (toFilePath)
 
 spec :: Spec
 spec = do
-    let it' name inner = it name $ example $ runPantryAppClean $ do
+    let it' name inner = xit name $ example $ runPantryAppClean $ do
           file <- getGlobalHintsFile
           writeFileBinary (toFilePath file) "this should be ignored"
           inner
diff --git a/test/Pantry/HackageSpec.hs b/test/Pantry/HackageSpec.hs
index 6cc6c1a..d693842 100644
--- a/test/Pantry/HackageSpec.hs
+++ b/test/Pantry/HackageSpec.hs
@@ -9,8 +9,8 @@ import Distribution.Types.Version (mkVersion)
 
 spec :: Spec
 spec = do
-  it "update works" $ asIO $ void $ runPantryApp $ updateHackageIndex Nothing
-  it "fuzzy lookup kicks in" $ do
+  xit "update works" $ asIO $ void $ runPantryApp $ updateHackageIndex Nothing
+  xit "fuzzy lookup kicks in" $ do
     let pir = PackageIdentifierRevision "thisisnot-tobe-foundon-hackage-please" (mkVersion [1..3]) CFILatest
     runPantryApp (loadPackageRaw (RPLIHackage pir Nothing))
       `shouldThrow` \e ->
@@ -18,6 +18,6 @@ spec = do
           UnknownHackagePackage pir' _  -> pir == pir'
           _ -> False
   -- Flaky test, can be broken by new packages on Hackage.
-  it "finds acme-missiles" $ do
+  xit "finds acme-missiles" $ do
     x <- runPantryApp (getHackageTypoCorrections "acme-missile")
     x `shouldSatisfy` ("acme-missiles" `elem`)
diff --git a/test/Pantry/TreeSpec.hs b/test/Pantry/TreeSpec.hs
index 0bcbec4..d619ec2 100644
--- a/test/Pantry/TreeSpec.hs
+++ b/test/Pantry/TreeSpec.hs
@@ -48,11 +48,11 @@ spec = do
               }
             emptyPM
 
-  it "zip and tar.gz archives match" $ asIO $ runPantryAppClean $ do
+  xit "zip and tar.gz archives match" $ asIO $ runPantryAppClean $ do
     pair1 <- loadPackageRaw tarPL
     pair2 <- loadPackageRaw zipPL
     liftIO $ pair2 `shouldBe` pair1
-  it "archive and Git repo match" $ asIO $ runPantryAppClean $ do
+  xit "archive and Git repo match" $ asIO $ runPantryAppClean $ do
     pair1 <- loadPackageRaw tarPL
     pair2 <- loadPackageRaw gitPL
     liftIO $ pair2 `shouldBe` pair1
@@ -62,7 +62,7 @@ spec = do
     pair2 <- loadPackageRaw hgPL
     liftIO $ pair2 `shouldBe` pair1
 
-  it "5045 no cabal file" $ asIO $ runPantryAppClean $ do
+  xit "5045 no cabal file" $ asIO $ runPantryAppClean $ do
     let rpli = RPLIArchive archive rpm
         packageName = mkPackageName "yaml"
         version = mkVersion [0, 11, 1, 2]
diff --git a/test/Pantry/TypesSpec.hs b/test/Pantry/TypesSpec.hs
index 04fdfc8..6a7eb1b 100644
--- a/test/Pantry/TypesSpec.hs
+++ b/test/Pantry/TypesSpec.hs
@@ -216,13 +216,13 @@ spec = do
           txt `shouldBe` txt''
         sameUrl _ _ _ = liftIO $ error "Snapshot synonym did not complete as expected"
 
-    it "default location for nightly-2020-01-01" $ do
+    xit "default location for nightly-2020-01-01" $ do
       let sn = Nightly $ ModifiedJulianDay 58849
       loc <- runPantryAppClean $ completeSnapshotLocation $ RSLSynonym sn
       sameUrl loc (defaultSnapshotLocation sn)
         "https://raw.githubusercontent.com/commercialhaskell/stackage-snapshots/master/nightly/2020/1/1.yaml"
 
-    it "default location for lts-15.1" $ do
+    xit "default location for lts-15.1" $ do
       let sn = LTS 15 1
       loc <- runPantryAppClean $ completeSnapshotLocation $ RSLSynonym sn
       sameUrl loc (defaultSnapshotLocation sn)
