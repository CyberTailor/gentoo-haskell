<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<herd>haskell</herd>
	<longdescription>
		&#39;data-reify&#39; provided the ability to turn recursive structures into explicit graphs.
		Many (implicitly or explicitly) recursive data structure can be given this ability, via
		a type class instance. This gives an alternative to using &#39;Ref&#39; for observable sharing.
		
		Observable sharing in general is unsafe, so we use the IO monad to bound this effect,
		but can be used safely even with &#39;unsafePerformIO&#39; if some simple conditions are met.
		Typically this package will be used to tie the knot with DSL&#39;s that depend of
		observable sharing, like Lava.
		
		Providing an instance for &#39;MuRef&#39; is the mechanism for allowing a structure to be
		reified into a graph, and several examples of this are provided.
		
		History:
		Version 0.1 used unsafe pointer compares.
		Version 0.2 of &#39;data-reify&#39; used &#39;StableName&#39;s, and was much faster.
		Version 0.3 provided two versions of &#39;MuRef&#39;, the mono-typed version,
		for trees of a single type,
		and the dynamic-typed version, for trees of different types.
		Version 0.4 used &#39;Int&#39; as a synonym for &#39;Unique&#39; rather than &#39;Data.Unique&#39;
		for node ids, by popular demand.
		Version 0.5 merged the mono-typed and dynamic version again, by using
		&#39;DynStableName&#39;, an unphantomized version of StableName.
		
		&amp;#169; 2009 Andy Gill; BSD3 license.
	</longdescription>
	<use>
		<flag name='tests'>Build test binaries.</flag>
	</use>
</pkgmetadata>
