diff --git a/src/Lambdabot/Plugin/Haskell/Pointful.hs b/src/Lambdabot/Plugin/Haskell/Pointful.hs
index bdf0bc8..0fc1d7f 100644
--- a/src/Lambdabot/Plugin/Haskell/Pointful.hs
+++ b/src/Lambdabot/Plugin/Haskell/Pointful.hs
@@ -56,7 +56,7 @@ succAlpha []       = "a"
 optimizeD :: Decl -> Decl
-optimizeD (PatBind locat (PVar fname) (UnGuardedRhs (Lambda _ pats rhs)) (BDecls []))
-        =  FunBind [Match locat fname pats Nothing (UnGuardedRhs rhs) (BDecls [])]
+optimizeD (PatBind locat (PVar fname) (UnGuardedRhs (Lambda _ pats rhs)) Nothing)
+        =  FunBind [Match locat fname pats Nothing (UnGuardedRhs rhs) Nothing]
 ---- combine function binding and lambda
-optimizeD (FunBind [Match locat fname pats1 Nothing (UnGuardedRhs (Lambda _ pats2 rhs)) (BDecls [])])
-        =  FunBind [Match locat fname (pats1 ++ pats2) Nothing (UnGuardedRhs rhs) (BDecls [])]
+optimizeD (FunBind [Match locat fname pats1 Nothing (UnGuardedRhs (Lambda _ pats2 rhs)) Nothing])
+        =  FunBind [Match locat fname (pats1 ++ pats2) Nothing (UnGuardedRhs rhs) Nothing]
 optimizeD x = x
@@ -176,3 +176,3 @@ combinators = M.fromList $ map declToTuple defs
           f@(ParseFailed _ _) -> error ("Combinator loading: " ++ show f)
-        declToTuple (PatBind _ (PVar fname) (UnGuardedRhs body) (BDecls []))
+        declToTuple (PatBind _ (PVar fname) (UnGuardedRhs body) Nothing)
           = (UnQual fname, Paren body)
diff --git a/src/Lambdabot/Plugin/Haskell/Pretty.hs b/src/Lambdabot/Plugin/Haskell/Pretty.hs
index 081b3a5..e58366f 100644
--- a/src/Lambdabot/Plugin/Haskell/Pretty.hs
+++ b/src/Lambdabot/Plugin/Haskell/Pretty.hs
@@ -75,3 +75,3 @@ doPretty (Hs.Module _ _ _ _ _ _ decls) =
         }
-        prettyDecl (PatBind _ (PVar (Ident "__expr__")) (UnGuardedRhs e) (BDecls [])) -- pretty printing an expression
+        prettyDecl (PatBind _ (PVar (Ident "__expr__")) (UnGuardedRhs e) Nothing) -- pretty printing an expression
                      = prettyPrintWithMode (makeModeExp e) e
diff --git a/src/Lambdabot/Plugin/Haskell/Undo.hs b/src/Lambdabot/Plugin/Haskell/Undo.hs
index ea5064d..dfd1f0b 100644
--- a/src/Lambdabot/Plugin/Haskell/Undo.hs
+++ b/src/Lambdabot/Plugin/Haskell/Undo.hs
@@ -56,3 +56,3 @@ undo v (Do stms) = f stms
                                     ]
-        where alt pat x = Alt s pat (UnGuardedRhs x) (BDecls [])
+        where alt pat x = Alt s pat (UnGuardedRhs x) Nothing
     f _ = error "Undo plugin error: can't undo!"
@@ -71,3 +71,3 @@ undo v (ListComp e stms) = f stms
                                     ]
-        where alt pat x = Alt s pat (UnGuardedRhs x) (BDecls [])
+        where alt pat x = Alt s pat (UnGuardedRhs x) Nothing
               concatMap' fun = App (App (var "concatMap") (Paren fun)) l
@@ -105,4 +105,4 @@ do' v e@(InfixApp l (QVarOp (UnQual (Symbol op))) r) =
                  (Lambda loc [PVar v1] (Case (Var (UnQual v2))
-                                            [ Alt _ p (UnGuardedRhs s) (BDecls [])
-                                            , Alt _ PWildCard (UnGuardedRhs (App (Var (UnQual (Ident "fail"))) _)) (BDecls [])
+                                            [ Alt _ p (UnGuardedRhs s) Nothing
+                                            , Alt _ PWildCard (UnGuardedRhs (App (Var (UnQual (Ident "fail"))) _)) Nothing
                                             ]))
