diff --git a/src/Lambdabot/Config.hs b/src/Lambdabot/Config.hs
index 0f42bfb..4b76dcf 100644
--- a/src/Lambdabot/Config.hs
+++ b/src/Lambdabot/Config.hs
@@ -12,2 +12,3 @@ module Lambdabot.Config
     , MonadConfig(..)
+    , ID(..)
     
@@ -30,2 +31,3 @@ import Language.Haskell.TH
 data Config t where Config :: (Typeable1 k, GCompare k) => !(k t) -> t -> (t -> t -> t) -> Config t
+newtype ID a = ID { unID :: a }
 
diff --git a/src/Lambdabot/Main.hs b/src/Lambdabot/Main.hs
index 598ef5d..640145d 100644
--- a/src/Lambdabot/Main.hs
+++ b/src/Lambdabot/Main.hs
@@ -65,3 +65,3 @@ setupLogging = do
 -- with in the mainLoop or further down.
-lambdabotMain :: LB () -> [DSum Config] -> IO ExitCode
+lambdabotMain :: LB () -> [DSum Config ID] -> IO ExitCode
 lambdabotMain initialise cfg = withSocketsDo . withIrcSignalCatch $ do
diff --git a/src/Lambdabot/Monad.hs b/src/Lambdabot/Monad.hs
index 863dc67..5f4fe25 100644
--- a/src/Lambdabot/Monad.hs
+++ b/src/Lambdabot/Monad.hs
@@ -71,3 +71,3 @@ data IRCRState = IRCRState
     , ircQuitMVar       :: MVar ()
-    , ircConfig         :: D.DMap Config
+    , ircConfig         :: D.DMap Config ID
     }
@@ -75,3 +75,3 @@ data IRCRState = IRCRState
 -- | Default ro state
-initRoState :: [D.DSum Config] -> IO IRCRState
+initRoState :: [D.DSum Config ID] -> IO IRCRState
 initRoState configuration = do
@@ -83,3 +83,3 @@ initRoState configuration = do
         , ircInitDoneMVar   = initDoneMVar
-        , ircConfig         = D.fromListWithKey (flip . mergeConfig) configuration
+        , ircConfig         = D.fromListWithKey (\c (ID v1) (ID v2) -> ID $ mergeConfig c v2 v1) configuration
         }
@@ -227,3 +227,3 @@ instance MonadState IRCRWState LB where
 instance MonadConfig LB where
-    getConfig k = liftM (maybe (getConfigDefault k) id . D.lookup k) (lb (askLB ircConfig))
+    getConfig k = liftM (maybe (getConfigDefault k) unID . D.lookup k) (lb (askLB ircConfig))
 
