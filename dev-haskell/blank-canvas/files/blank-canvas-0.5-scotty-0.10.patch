--- blank-canvas-0.5-orig/Graphics/Blank.hs	2014-09-20 13:26:11.000000000 +1000
+++ blank-canvas-0.5/Graphics/Blank.hs	2015-05-31 23:30:34.954417217 +1000
@@ -193,49 +193,50 @@
 
 --   print dataDir
 
+   -- use the comet
+   let kc_opts :: KC.Options
+       kc_opts = KC.Options { KC.prefix = "/blank", KC.verbose = if debug opts then 3 else 0 }
+
+
+
+   connectApp <- KC.connect kc_opts $ \ kc_doc -> do
+       -- register the events we want to watch for
+       KC.send kc_doc $ T.unlines
+          [ "register(" <> T.pack(show nm) <> ");"
+          | nm <- events opts
+          ]
+
+       queue <- atomically newTChan
+       _ <- forkIO $ forever $ do
+               val <- atomically $ readTChan $ KC.eventQueue $ kc_doc
+               case fromJSON val of
+                  Success (event :: Event) -> do
+                          atomically $ writeTChan queue event
+                  _ -> return ()
+
+
+       let cxt0 = DeviceContext kc_doc queue 300 300 1 locals
+
+       -- A bit of bootstrapping
+       DeviceAttributes w h dpr <- send cxt0 device
+       -- print (DeviceAttributes w h dpr)
+
+       let cxt1 = cxt0
+                { ctx_width = w
+                , ctx_height = h
+                , ctx_devicePixelRatio = dpr
+                }
+
+       (actions $ cxt1) `catch` \ (e :: SomeException) -> do
+               print ("Exception in blank-canvas application:"  :: String)
+               print e
+               throw e
+
    app <- scottyApp $ do
 --        middleware logStdoutDev
         sequence_ [ Scotty.middleware ware
                   | ware <- middleware opts
                   ]
-        -- use the comet
-        let kc_opts :: KC.Options
-            kc_opts = KC.Options { KC.prefix = "/blank", KC.verbose = if debug opts then 3 else 0 }
-
-
-
-        KC.connect kc_opts $ \ kc_doc -> do
-                -- register the events we want to watch for
-                KC.send kc_doc $ T.unlines
-                   [ "register(" <> T.pack(show nm) <> ");"
-                   | nm <- events opts
-                   ]
-
-                queue <- atomically newTChan
-                _ <- forkIO $ forever $ do
-                        val <- atomically $ readTChan $ KC.eventQueue $ kc_doc
-                        case fromJSON val of
-                           Success (event :: Event) -> do
-                                   atomically $ writeTChan queue event
-                           _ -> return ()
-
-
-                let cxt0 = DeviceContext kc_doc queue 300 300 1 locals
-
-                -- A bit of bootstrapping
-                DeviceAttributes w h dpr <- send cxt0 device
-                -- print (DeviceAttributes w h dpr)
-
-                let cxt1 = cxt0
-                         { ctx_width = w
-                         , ctx_height = h
-                         , ctx_devicePixelRatio = dpr
-                         }
-
-                (actions $ cxt1) `catch` \ (e :: SomeException) -> do
-                        print ("Exception in blank-canvas application:"  :: String)
-                        print e
-                        throw e
 
         get "/"                 $ file $ dataDir ++ "/static/index.html"
         get "/jquery.js"        $ file $ dataDir ++ "/static/jquery.js"
