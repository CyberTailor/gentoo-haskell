--- hsx2hs-0.14.1.3-orig/src/Language/Haskell/HSX/Transform.hs	2018-03-28 13:36:39.000000000 +1100
+++ hsx2hs-0.14.1.3/src/Language/Haskell/HSX/Transform.hs	2018-10-12 16:07:59.978283746 +1100
@@ -110,7 +110,7 @@
         -- their evaluation to a let-expression on the right-hand side
         let ([pat'], rnpss) = unzip $ renameIrrPats [pat]
         -- Transform the pattern itself
-        ([pat''], attrGuards, guards, decls'') <- transformPatterns [pat']
+        ~([pat''], attrGuards, guards, decls'') <- transformPatterns [pat']
         -- Transform the right-hand side, and add any generated guards
         -- and let expressions to it
         rhs' <- mkRhs (attrGuards ++ guards) (concat rnpss) rhs
@@ -453,7 +453,7 @@
                     -- We need to transform all pattern bindings in a set of
                     -- declarations in the same context w.r.t. generating fresh
                     -- variable names, since they will all be in scope at the same time.
-                    ([pat'], ags, gs, ws, k', l') <- runTrFromTo k l (trPatterns [pat])
+                    ~([pat'], ags, gs, ws, k', l') <- runTrFromTo k l (trPatterns [pat])
                     decls' <- case decls of
                         -- Any declarations already in place should be left where they
                         -- are since they probably refer to the generating right-hand
@@ -525,7 +525,7 @@
             -- their evaluation to a let-expression on the right-hand side
             ([p'], rnpss) = unzip $ renameIrrPats [p]
         -- Transform the pattern itself
-        ([p''], ags, gs, ds) <- transformPatterns [p']
+        ~([p''], ags, gs, ds) <- transformPatterns [p']
         -- Put the generated declarations in a let-statement
         let lt  = case ds of
                [] -> []
@@ -575,7 +575,7 @@
     -- their evaluation to a let-expression on the right-hand side
     let ([pat'], rnpss) = unzip $ renameIrrPats [pat]
     -- Transform the pattern itself
-    ([pat''], attrGuards, guards, decls'') <- transformPatterns [pat']
+    ~([pat''], attrGuards, guards, decls'') <- transformPatterns [pat']
     -- Transform the right-hand side, and add any generated guards
     -- and let expressions to it.
     rhs' <- mkRhs (attrGuards ++ guards) (concat rnpss) rhs
