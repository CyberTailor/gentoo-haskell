I did not manage to get it to typecheck: https://github.com/seereason/sr-extra/issues/5

Looks like none of ::haskell uses '[] empty alternative.
--- a/Extra/Errors.hs
+++ b/Extra/Errors.hs
@@ -113,6 +113,7 @@ instance (S.Serialize e, S.Serialize (OneOf s)) => S.Serialize (OneOf (e ': s))
     1 -> Val <$> S.get
     _ -> error "impossible"
 
+{-
 instance SafeCopy (OneOf '[]) where
   version = 1
   kind = base
@@ -121,6 +122,7 @@ instance SafeCopy (OneOf '[]) where
   putCopy :: S.Serialize (OneOf s) => OneOf s -> Contained S.Put
   putCopy = contain . S.put
   errorTypeName _ = "()"
+-}
 
 instance (SafeCopy e, S.Serialize e, Typeable e,  S.Serialize (OneOf s), Typeable s) => SafeCopy (OneOf (e ': s)) where
   version = 1
--- a/Extra/Orphans.hs
+++ b/Extra/Orphans.hs
@@ -17,6 +17,7 @@ import Data.Serialize.Get (label)
 import Data.Text as T hiding (concat, intercalate)
 import Data.Text.Lazy as LT hiding (concat, intercalate)
 import Data.Time (UTCTime(..), Day(ModifiedJulianDay), TimeOfDay(..), timeOfDayToTime, DiffTime)
+import Data.Typeable
 import Data.UserId (UserId(..))
 import Data.UUID.Orphans ()
 import Data.UUID (UUID)
@@ -34,7 +35,7 @@ import System.IO.Unsafe (unsafePerformIO)
 import Test.QuickCheck (Arbitrary(arbitrary), choose, elements, Gen, listOf, listOf1, resize)
 #endif
 
-instance SafeCopy (Proxy t) where
+instance Typeable t => SafeCopy (Proxy t) where
       putCopy Proxy = contain (do { return () })
       getCopy = contain (label "Data.Proxy.Proxy:" (pure Proxy))
       version = 0
