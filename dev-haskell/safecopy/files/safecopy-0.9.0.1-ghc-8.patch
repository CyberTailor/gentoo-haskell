diff --git a/src/Data/SafeCopy/Derive.hs b/src/Data/SafeCopy/Derive.hs
index a1b9910..b570fb3 100644
--- a/src/Data/SafeCopy/Derive.hs
+++ b/src/Data/SafeCopy/Derive.hs
@@ -246,3 +246,7 @@ internalDeriveSafeCopy deriveType versionId kindName tyName = do
   case info of
+#if MIN_VERSION_template_haskell(2,11,0)
+    TyConI (DataD context _name tyvars _mkind cons _derivs)
+#else
     TyConI (DataD context _name tyvars cons _derivs)
+#endif
       | length cons > 255 -> fail $ "Can't derive SafeCopy instance for: " ++ show tyName ++
@@ -250,3 +254,7 @@ internalDeriveSafeCopy deriveType versionId kindName tyName = do
       | otherwise         -> worker context tyvars (zip [0..] cons)
+#if MIN_VERSION_template_haskell(2,11,0)
+    TyConI (NewtypeD context _name tyvars _mkind con _derivs) ->
+#else
     TyConI (NewtypeD context _name tyvars con _derivs) ->
+#endif
       worker context tyvars [(0, con)]
@@ -255,5 +263,13 @@ internalDeriveSafeCopy deriveType versionId kindName tyName = do
         case inst of
+#if MIN_VERSION_template_haskell(2,11,0)
+          DataInstD context _name ty _mkind cons _derivs ->
+#else
           DataInstD context _name ty cons _derivs ->
+#endif
               worker' (foldl appT (conT tyName) (map return ty)) context [] (zip [0..] cons)
+#if MIN_VERSION_template_haskell(2,11,0)
+          NewtypeInstD context _name ty _mkind con _derivs ->
+#else
           NewtypeInstD context _name ty con _derivs ->
+#endif
               worker' (foldl appT (conT tyName) (map return ty)) context [] [(0, con)]
@@ -288,3 +304,7 @@ internalDeriveSafeCopyIndexedType deriveType versionId kindName tyName tyIndex'
         case inst of
+#if MIN_VERSION_template_haskell(2,11,0)
+          DataInstD context _name ty _mkind cons _derivs
+#else
           DataInstD context _name ty cons _derivs
+#endif
             | ty == tyIndex ->
@@ -293,3 +313,7 @@ internalDeriveSafeCopyIndexedType deriveType versionId kindName tyName tyIndex'
               return []
+#if MIN_VERSION_template_haskell(2,11,0)
+          NewtypeInstD context _name ty _mkind con _derivs
+#else
           NewtypeInstD context _name ty con _derivs
+#endif
             | ty == tyIndex ->
diff --git a/test/instances.hs b/test/instances.hs
index d3b67f3..0e1f64e 100644
--- a/test/instances.hs
+++ b/test/instances.hs
@@ -63,3 +63,5 @@ deriving instance (Show a) => Show (Prim a)
 deriving instance Eq ZonedTime
+#if ! MIN_VERSION_time(1,6,0)
 deriving instance Show UniversalTime
+#endif
 
@@ -117,3 +119,8 @@ do let a = conT ''Int
 
+#if MIN_VERSION_template_haskell(2,11,0)
+   let instances (ClassI _ decs) = [ typ | InstanceD _ _ (AppT _ typ) _ <- decs ]
+#else
    let instances (ClassI _ decs) = [ typ | InstanceD _ (AppT _ typ) _ <- decs ]
+#endif
+
        instances _ = []
