--- a/src/binary/Data/Binary/Builder.hs
+++ b/src/binary/Data/Binary/Builder.hs
@@ -84,2 +84,4 @@ import GHC.Word (uncheckedShiftRL64#)
 
+import qualified Data.Semigroup as S
+
 ------------------------------------------------------------------------
@@ -102,2 +104,6 @@ newtype Builder = Builder {
 
+instance S.Semigroup Builder where
+    (<>) = append
+    {-# INLINE (<>) #-}
+
 instance Monoid Builder where
--- a/src/compiler/GF/Command/Commands.hs
+++ b/src/compiler/GF/Command/Commands.hs
@@ -5,3 +5,3 @@ module GF.Command.Commands (
   ) where
-import Prelude hiding (putStrLn)
+import Prelude hiding (putStrLn, (<>))
 
@@ -38,3 +38,2 @@ import Data.List (sort)
 
-
 data PGFEnv = Env {pgf::PGF,mos::Map.Map Language Morpho}
--- a/src/compiler/GF/Compile/CheckGrammar.hs
+++ b/src/compiler/GF/Compile/CheckGrammar.hs
@@ -45,2 +45,3 @@ import Control.Monad
 import GF.Text.Pretty
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Compile/Compute/ConcreteNew.hs
+++ b/src/compiler/GF/Compile/Compute/ConcreteNew.hs
@@ -25,2 +25,3 @@ import qualified Data.Map as Map
 import Debug.Trace(trace)
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Compile/PGFtoLProlog.hs
+++ b/src/compiler/GF/Compile/PGFtoLProlog.hs
@@ -10,2 +10,3 @@ import qualified Data.Map as Map
 --import Debug.Trace
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Compile/TypeCheck/RConcrete.hs
+++ b/src/compiler/GF/Compile/TypeCheck/RConcrete.hs
@@ -16,2 +16,3 @@ import Control.Monad
 import GF.Text.Pretty
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/CompileInParallel.hs
+++ b/src/compiler/GF/CompileInParallel.hs
@@ -2,3 +2,3 @@
 module GF.CompileInParallel(parallelBatchCompile) where
-import Prelude hiding (catch)
+import Prelude hiding (catch, (<>))
 import Control.Monad(join,ap,when,unless)
--- a/src/compiler/GF/Grammar/Printer.hs
+++ b/src/compiler/GF/Grammar/Printer.hs
@@ -39,2 +39,3 @@ import qualified Data.Map as Map
 import qualified Data.Array.IArray as Array
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Haskell.hs
+++ b/src/compiler/GF/Haskell.hs
@@ -5,2 +5,3 @@ import GF.Infra.Ident(Ident,identS)
 import GF.Text.Pretty
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Infra/CheckM.hs
+++ b/src/compiler/GF/Infra/CheckM.hs
@@ -33,2 +33,3 @@ import Control.Monad(liftM,ap)
 import Control.Applicative(Applicative(..))
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Infra/Location.hs
+++ b/src/compiler/GF/Infra/Location.hs
@@ -3,2 +3,3 @@ module GF.Infra.Location where
 import GF.Text.Pretty
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Speech/GSL.hs
+++ b/src/compiler/GF/Speech/GSL.hs
@@ -21,2 +21,3 @@ import Data.List (partition)
 import GF.Text.Pretty
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Speech/JSGF.hs
+++ b/src/compiler/GF/Speech/JSGF.hs
@@ -27,2 +27,3 @@ import GF.Text.Pretty
 --import Debug.Trace
+import Prelude hiding ((<>))
 
--- a/src/compiler/GF/Speech/SRGS_ABNF.hs
+++ b/src/compiler/GF/Speech/SRGS_ABNF.hs
@@ -34,2 +34,3 @@ import GF.Text.Pretty
 --import Debug.Trace
+import Prelude hiding ((<>))
 
--- a/src/runtime/haskell/PGF/ByteCode.hs
+++ b/src/runtime/haskell/PGF/ByteCode.hs
@@ -7,2 +7,3 @@ import PGF.CId
 import Text.PrettyPrint
+import Prelude hiding ((<>))
 
--- a/src/runtime/haskell/PGF/Macros.hs
+++ b/src/runtime/haskell/PGF/Macros.hs
@@ -14,2 +14,3 @@ import Data.Array.IArray
 import Text.PrettyPrint
+import Prelude hiding ((<>))
 
--- a/src/runtime/haskell/PGF/Printer.hs
+++ b/src/runtime/haskell/PGF/Printer.hs
@@ -14,2 +14,3 @@ import Data.Array.IArray
 import Text.PrettyPrint
+import Prelude hiding ((<>))
 
--- a/src/runtime/haskell/PGF/VisualizeTree.hs
+++ b/src/runtime/haskell/PGF/VisualizeTree.hs
@@ -40,2 +40,3 @@ import Data.Maybe (fromMaybe)
 import Text.PrettyPrint
+import Prelude hiding ((<>))
 
