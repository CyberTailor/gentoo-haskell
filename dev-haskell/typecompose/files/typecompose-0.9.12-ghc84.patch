--- a/src/Control/Compose.hs
+++ b/src/Control/Compose.hs
@@ -93,2 +93,3 @@ import Control.Applicative
 import Control.Monad (join,liftM)
+import qualified Data.Semigroup as S
 
@@ -594,2 +595,5 @@ instance Arrow arr => ContraFunctor (Flip arr b) where
 
+instance (Applicative (j a), Monoid o) => S.Semigroup (Flip j o a) where
+  (<>) = inFlip2 (liftA2 mappend)
+
 -- Useful for (~>) = (->).  Maybe others.
@@ -643,2 +647,5 @@ inApp2 h (App fa) = inApp (h fa)
 
+instance (Applicative f, Monoid m) => S.Semigroup (App f m) where
+  (<>) = inApp2 (liftA2 mappend)
+
 -- Example: App IO ()
@@ -850,2 +857,3 @@ newtype Arrw j f g a = Arrw { unArrw :: f a `j` g a } -- deriving Monoid
 
+deriving instance Monoid (f a `j` g a) => S.Semigroup (Arrw j f g a)
 deriving instance Monoid (f a `j` g a) => Monoid (Arrw j f g a)
--- a/src/Data/CxMonoid.hs
+++ b/src/Data/CxMonoid.hs
@@ -21,2 +21,3 @@ import Data.Bijection
 import Data.Title
+import qualified Data.Semigroup as S
 
@@ -32,2 +33,6 @@ biCxMonoid = Bi CxMonoid unCxMonoid
 
+instance S.Semigroup (CxMonoid a) where
+  CxMonoid f <> CxMonoid g  =
+    CxMonoid (\ md@(_,op) -> f md `op` g md)
+
 instance Monoid (CxMonoid a) where
