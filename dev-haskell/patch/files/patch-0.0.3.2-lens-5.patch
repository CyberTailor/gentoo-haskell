--- a/src/Data/Patch/IntMap.hs
+++ b/src/Data/Patch/IntMap.hs
@@ -49,7 +49,9 @@ instance FunctorWithIndex Int PatchIntMap
 instance FoldableWithIndex Int PatchIntMap
 instance TraversableWithIndex Int PatchIntMap where
   itraverse = itraversed . Indexed
+#if !MIN_VERSION_lens(5,0,0)
   itraversed = _Wrapped .> itraversed <. traversed
+#endif
 
 -- | Map a function @Int -> a -> b@ over all @a@s in the given @'PatchIntMap' a@
 -- (that is, all inserts/updates), producing a @PatchIntMap b@.
--- a/src/Data/Patch/Map.hs
+++ b/src/Data/Patch/Map.hs
@@ -59,7 +59,9 @@ instance FunctorWithIndex k (PatchMap k)
 instance FoldableWithIndex k (PatchMap k)
 instance TraversableWithIndex k (PatchMap k) where
   itraverse = itraversed . Indexed
+#if !MIN_VERSION_lens(5,0,0)
   itraversed = _Wrapped .> itraversed <. traversed
+#endif
 
 -- | Returns all the new elements that will be added to the 'Map'
 patchMapNewElements :: PatchMap k v -> [v]
--- a/src/Data/Patch/MapWithMove.hs
+++ b/src/Data/Patch/MapWithMove.hs
@@ -72,7 +72,9 @@ instance FunctorWithIndex k (PatchMapWithMove k)
 instance FoldableWithIndex k (PatchMapWithMove k)
 instance TraversableWithIndex k (PatchMapWithMove k) where
   itraverse = itraversed . Indexed
+#if !MIN_VERSION_lens(5,0,0)
   itraversed = _Wrapped .> itraversed <. traversed
+#endif
 
 -- | Create a 'PatchMapWithMove', validating it
 patchMapWithMove :: Ord k => Map k (NodeInfo k v) -> Maybe (PatchMapWithMove k v)
