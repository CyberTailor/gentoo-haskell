<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
	<herd>haskell</herd>
	<longdescription>
		BlogLiterately is a tool for uploading web log posts to web log servers
		that support the MetaWeblog API (such as WordPress-based blogs and many
		others).  Blog posts to be published via BlogLiterately are written in
		markdown [1] format, with extensions supported by pandoc [2].  Posts may be
		actual &#39;bird-style&#39; literate Haskell files, with commentary in markdown.
		Code segments (including actual source lines from literate haskell files,
		as well as markdown code blocks) may be syntax-highlighted in the resulting
		HTML that is posted to the blog.  There are two types (two different
		libraries used) of formatting available for formatting code segments.
		
		* Hscolour (for formatting Haskell code segments)
		
		* highlighting-kate (for formatting Haskell and non-haskell segments)
		
		The Markdown webpage has information about markdown formatting options,
		and the Pandoc website has information about the extensions supported.
		BlogLiterately extends the notation a bit further, for specifying code
		segments.  In basic markdown, A code segment is set off from normal
		text via indentation, e.g.:
		
		&gt;   -- This is a code segment but the tool doesn&#39;t know what kind!
		&gt;   foo :: String -&gt; String
		
		Pandoc offers another way to specify a code segment (replace the
		square braces with curly braces, haddock/hackage mangles them):
		
		&gt; ~~~~ [ .haskell ]
		&gt; -- This is a code segment, and the tool knows it&#39;s Haskell!
		&gt; foo :: String -&gt; String
		&gt; ~~~~
		
		BlogLiterately lets you specify a Haskell segment this way (this is
		just a normal markdown indented code block with an extra tag at
		the top.  In either the above way of specifying the type of code
		in the block, you may specify other kinds of code besides haskell,
		e.g. cpp, bash, java, ml, eiffel, etc.):
		
		&gt;     [haskell]
		&gt;     -- This is a code segment, and the tool knows it&#39;s Haskell!
		&gt;     foo :: String -&gt; String
		
		Once you have written your markdown file, you can run the tool, specifying how
		you want it highlighted.  You can specify different highlighting modes for
		the haskell segments and the other code segments.  If using hscolour, you
		can specify that the highlighting be done &#39;inline&#39; via CSS &#39;style&#39;
		attributes.  You can use the default styling (which is similar to source
		code in documentation on hackage) or you can specify a configuration file
		which looks something like this:
		
		&gt;     [(&quot;hs-keyword&quot;,&quot;color: blue; font-weight: bold;&quot;)
		&gt;     , (&quot;hs-keyglyph&quot;,&quot;color: red;&quot;)
		&gt;     , (&quot;hs-layout&quot;,&quot;color: red;&quot;)
		&gt;     , (&quot;hs-comment&quot;,&quot;color: green;&quot;)
		&gt;     , (&quot;hs-conid&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-varid&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-conop&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-varop&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-str&quot;, &quot;color: teal;&quot;)
		&gt;     , (&quot;hs-chr&quot;, &quot;color: teal;&quot;)
		&gt;     , (&quot;hs-number&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-cpp&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-selection&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-variantselection&quot;, &quot;&quot;)
		&gt;     , (&quot;hs-definition&quot;, &quot;&quot;)]
		
		It has to be (readable as) a Haskell value of type [(String,String)],
		and it will only have an effect if you use the above class names (e.g.
		&#39;hs-keyword&#39; to specify a style for Haskell keywords).
		
		With highlighting-kate (always) and with hscolour
		(optionally), the style for syntax segments is specified using &#39;class&#39;
		attributes, so the stylesheet must be provided separately.  Sample
		stylesheets are provided in the package archive file.
		
		To use the highlighting-kate, you must (re)install Pandoc with highlighting
		enabled, like so:
		
		&gt; cabal install -fhighlighting pandoc
		
		or
		
		&gt; cabal install --reinstall -fhighlighting pandoc
		
		(If you have already installed BlogLiterately, you must reinstall that
		as well).
		
		The options for BlogLiterately are, I hope, self-explanatory (given the
		above background!).  Note that if Pandoc isn&#39;t installed with highlighting
		enabled, there will be fewer options (no -kate options):
		
		&gt; BlogLierately v0.3, (C) Robert Greayer 2009
		&gt; This program comes with ABSOLUTELY NO WARRANTY
		&gt;
		&gt;
		&gt; BlogLiterately [FLAG] URL USER PASSWORD TITLE FILE
		&gt;
		&gt;   -? --help[=FORMAT]    Show usage information (optional format)
		&gt;   -V --version          Show version information
		&gt;   -v --verbose          Higher verbosity
		&gt;   -q --quiet            Lower verbosity
		&gt;   -t --test             do a test-run: html goes to stdout, is not posted
		&gt;   -s --style=FILE       Style Specification (for --hscolour-icss)
		&gt;      --hscolour-icss    hilight haskell: hscolour, inline style (default)
		&gt;      --hscolour-css     hilight haskell: hscolour, separate stylesheet
		&gt;      --hs-nohilight     no haskell hilighting
		&gt;      --hs-kate          hilight haskell with highlighting-kate
		&gt;      --other-code-kate  hilight other code with highlighting-kate
		&gt;      --publish          Publish post (otherwise it&#39;s uploaded as a draft)
		&gt;      --category=VALUE   post category (can specify more than one)
		&gt;      --tag=VALUE        set tag (can specify more than one)
		&gt;   -b --blogid=VALUE     Blog specific identifier (default=default)
		&gt;      --postid=VALUE     Post to replace (if any)
		
		
		To post to a WordPress blog, the command is:
		
		&gt;     BlogLiterately http://blogurl.example.com/xmlrpc.php \
		&gt;         myname mypasswd &quot;Sample&quot; Sample.lhs
		
		(which creates a new post).  If, for example, the post id of that post
		(which BlogLiterately prints when it uploads a new post) was &#39;37&#39;, then
		to update the post, the command would be:
		
		&gt;     BlogLiterately --postid=37 http://blogurl.example.com/xmlrpc.php \
		&gt;         myname mypasswd &quot;Sample&quot; Sample.lhs
		
		and the post will be updated with the new text.
		
		References:
		
		1. &lt;http://daringfireball.net/projects/markdown/&gt;
		
		2. &lt;http://johnmacfarlane.net/pandoc/&gt;
	</longdescription>
</pkgmetadata>
